"use strict";(self.webpackChunkantd_mini=self.webpackChunkantd_mini||[]).push([[1926],{5892:function(d,n,e){e.r(n),e.d(n,{demos:function(){return o}});var t=e(67294),a=e(25946),o={"src-swipe-action-demo-swipeactionleft":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,25584))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionleft",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionnumber":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,36943))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionnumber",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionanimation":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,37564))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionanimation",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionwidth":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,43282))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionwidth",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionspeed":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,61099))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionspeed",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactiontap":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,18373))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactiontap",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionmove":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,85009))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionmove",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionleftright":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,89466))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionleftright",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeactionslot":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,40234))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeactionslot",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0},"src-swipe-action-demo-swipeaction":{component:t.memo(t.lazy(function(){return e.e(2433).then(e.bind(e,81229))})),asset:{type:"BLOCK",id:"src-swipe-action-demo-swipeaction",refAtomIds:[],dependencies:{},entry:"index.ts"},context:{},renderOpts:void 0}}},90756:function(d,n,e){e.r(n),e.d(n,{texts:function(){return a}});var t=e(25946);const a=[{value:"List of functional extensions. Show hidden function menus by sliding.",paraId:0,tocIndex:0},{value:"The component's parent container must have width and height set.",paraId:1,tocIndex:1},{value:"The sum of the widths of the sliding buttons on both sides must be the same.",paraId:1,tocIndex:1},{value:"When elasticity is set to false, a smaller damping value provides a better experience.",paraId:1,tocIndex:1},{value:"The second confirmation of the sliding on each side will only trigger the first one, the others will not trigger.",paraId:1,tocIndex:1},{value:"It is recommended to use it in applets of the basic library 2.0.1.0 versions (such as DingTalk applets) have defects in sliding experience (lack of sliding transition effect after touchend).",paraId:1,tocIndex:1},{value:"In ",paraId:2,tocIndex:2},{value:"index.json",paraId:2,tocIndex:2},{value:" Introducing Components in",paraId:2,tocIndex:2},{value:`"usingComponents": {
#if ALIPAY
  "ant-swipe-action": "antd-mini/es/SwipeAction/index"
#endif

#if WECHAT
  "ant-swipe-action": "antd-mini/SwipeAction/index"
#endif
}
`,paraId:3,tocIndex:2},{value:`<ant-swipe-action
  rightButtons="{{[[
      {
        text: 'favor',
        bgColor: '#CCCCCC',
        color: '#fff',
        width: 200,
      },
      {
        text: 'rest',
        bgColor: '#1677FF',
        color: '#fff',
        width: 170,
      },
      {
        text: 'delete',
        bgColor: '#FF2B00',
        color: '#fff',
        width: 140,
      },
    ]]}}"
    elasticity="{{true}}"
    swiped="{{swipeIndex === index}}"
    onSwipeEnd="onSwipeEnd"
    onSwipeStart="onSwipeStart"
    onButtonTap="onButtonTap">
  <view>Right-three buttons</view>
</ant-swipe-action>
`,paraId:4,tocIndex:4},{value:"Setup",paraId:5,tocIndex:5},{value:"leftButtons",paraId:5,tocIndex:5},{value:`Property
`,paraId:5,tocIndex:5},{value:"Setup",paraId:6,tocIndex:7},{value:"elasticity",paraId:6,tocIndex:7},{value:"property is",paraId:6,tocIndex:7},{value:"false",paraId:6,tocIndex:7},{value:"Set the buttons",paraId:7,tocIndex:8},{value:"width",paraId:7,tocIndex:8},{value:`Property
`,paraId:7,tocIndex:8},{value:"Setup",paraId:8,tocIndex:9},{value:"damping",paraId:8,tocIndex:9},{value:`Property
`,paraId:8,tocIndex:9},{value:"Set buttons Properties",paraId:9,tocIndex:10},{value:"confirmType",paraId:9,tocIndex:10},{value:"For",paraId:9,tocIndex:10},{value:"tap",paraId:9,tocIndex:10},{value:"Set buttons Properties",paraId:10,tocIndex:11},{value:"confirmType",paraId:10,tocIndex:11},{value:"For",paraId:10,tocIndex:11},{value:"move",paraId:10,tocIndex:11},{value:"Can be set simultaneously",paraId:11,tocIndex:12},{value:"leftButtons",paraId:11,tocIndex:12},{value:"and",paraId:11,tocIndex:12},{value:"rightButtons",paraId:11,tocIndex:12},{value:"Property",paraId:12,tocIndex:15},{value:"Type",paraId:12,tocIndex:15},{value:"Default Value",paraId:12,tocIndex:15},{value:"Description",paraId:12,tocIndex:15},{value:"leftButtons",paraId:12,tocIndex:15},{value:"SwipeButton",paraId:13,tocIndex:15},{value:"[]",paraId:12,tocIndex:15},{value:"Left button",paraId:12,tocIndex:15},{value:"rightButtons",paraId:12,tocIndex:15},{value:"SwipeButton",paraId:14,tocIndex:15},{value:"[]",paraId:12,tocIndex:15},{value:"Right button",paraId:12,tocIndex:15},{value:"damping",paraId:12,tocIndex:15},{value:"number",paraId:12,tocIndex:15},{value:"70",paraId:12,tocIndex:15},{value:"Sliding speed",paraId:12,tocIndex:15},{value:"elasticity",paraId:12,tocIndex:15},{value:"boolean",paraId:12,tocIndex:15},{value:"true",paraId:12,tocIndex:15},{value:"sliding elasticity",paraId:12,tocIndex:15},{value:"swiped",paraId:12,tocIndex:15},{value:"''",paraId:12,tocIndex:15},{value:" | ",paraId:12,tocIndex:15},{value:"'left'",paraId:12,tocIndex:15},{value:" | ",paraId:12,tocIndex:15},{value:"'right'",paraId:12,tocIndex:15},{value:"false",paraId:12,tocIndex:15},{value:"Whether sliding open",paraId:12,tocIndex:15},{value:"defaultSwiped",paraId:12,tocIndex:15},{value:"''",paraId:12,tocIndex:15},{value:" | ",paraId:12,tocIndex:15},{value:"'left'",paraId:12,tocIndex:15},{value:" | ",paraId:12,tocIndex:15},{value:"'right'",paraId:12,tocIndex:15},{value:"false",paraId:12,tocIndex:15},{value:"Default slide open",paraId:12,tocIndex:15},{value:"disabled",paraId:12,tocIndex:15},{value:"boolean",paraId:12,tocIndex:15},{value:"false",paraId:12,tocIndex:15},{value:"No Sliding",paraId:12,tocIndex:15},{value:"onSwipeStart",paraId:12,tocIndex:15},{value:"Slide start callback function",paraId:12,tocIndex:15},{value:"(data: object, e: string) => void",paraId:12,tocIndex:15},{value:"E: data in the data-xxx on the component; Data: direction (whether the sliding button is left or right),swiped (whether to slide open)",paraId:12,tocIndex:15},{value:"onSwipeEnd",paraId:12,tocIndex:15},{value:"Slide End Callback Function",paraId:12,tocIndex:15},{value:"(data: object, e: string) => void",paraId:12,tocIndex:15},{value:"E: data in the data-xxx on the component; Data: direction (whether the sliding button is left or right),swiped (whether to slide open)",paraId:12,tocIndex:15},{value:"onButtonTap",paraId:12,tocIndex:15},{value:"Callback function triggered by the button",paraId:12,tocIndex:15},{value:"(data: object, e: string) => void",paraId:12,tocIndex:15},{value:"E: data in the data-xxx on the component; data: direction (whether the sliding button is left or right),btnIdx (the index of the button, the part near the main body is 0)",paraId:12,tocIndex:15},{value:"Property",paraId:15,tocIndex:16},{value:"Type",paraId:15,tocIndex:16},{value:"Default Value",paraId:15,tocIndex:16},{value:"Description",paraId:15,tocIndex:16},{value:"text",paraId:15,tocIndex:16},{value:"string",paraId:15,tocIndex:16},{value:"-",paraId:15,tocIndex:16},{value:"Button Text",paraId:15,tocIndex:16},{value:"slotName",paraId:15,tocIndex:16},{value:"string",paraId:15,tocIndex:16},{value:"-",paraId:15,tocIndex:16},{value:"The name of the slot. You can customize the content of the corresponding button.",paraId:15,tocIndex:16},{value:"${slotName}-confirm",paraId:15,tocIndex:16},{value:"You can customize the content of the button at the time of confirmation",paraId:15,tocIndex:16},{value:"bgColor",paraId:15,tocIndex:16},{value:"string",paraId:15,tocIndex:16},{value:"-",paraId:15,tocIndex:16},{value:"Button background color",paraId:15,tocIndex:16},{value:"color",paraId:15,tocIndex:16},{value:"string",paraId:15,tocIndex:16},{value:"#fff",paraId:15,tocIndex:16},{value:"Button Font Color",paraId:15,tocIndex:16},{value:"width",paraId:15,tocIndex:16},{value:"number",paraId:15,tocIndex:16},{value:"150",paraId:15,tocIndex:16},{value:"Button width",paraId:15,tocIndex:16},{value:"confirmType",paraId:15,tocIndex:16},{value:"''",paraId:15,tocIndex:16},{value:" | ",paraId:15,tocIndex:16},{value:"'move'",paraId:15,tocIndex:16},{value:" | ",paraId:15,tocIndex:16},{value:"'tap'",paraId:15,tocIndex:16},{value:"-",paraId:15,tocIndex:16},{value:"Secondary confirmation type: do not trigger secondary confirmation",paraId:15,tocIndex:16},{value:"confirmText",paraId:15,tocIndex:16},{value:"string",paraId:15,tocIndex:16},{value:"-",paraId:15,tocIndex:16},{value:"Copy description of the second confirmation; if empty, text is displayed",paraId:15,tocIndex:16},{value:"Component provides the following CSS variables, which can be used to customize styles. For details, see ConfigProvider Components.",paraId:16,tocIndex:18},{value:"Variable name",paraId:17,tocIndex:18},{value:"Light Mode Default",paraId:17,tocIndex:18},{value:"Dark Mode Default",paraId:17,tocIndex:18},{value:"Remarks",paraId:17,tocIndex:18},{value:"--swipe-action-color",paraId:17,tocIndex:18},{value:"#ffffff",paraId:17,tocIndex:18},{value:"#ffffff",paraId:17,tocIndex:18},{value:"Slide operation color",paraId:17,tocIndex:18}]}}]);
